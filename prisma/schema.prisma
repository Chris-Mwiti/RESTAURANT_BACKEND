// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @db.ObjectId  @map("_id")
  firstName String  
  lastName String
  avatarUrl String? @default("/avatar.jpg")
  address String? @default("Nairobi")
  email String @unique
  password String?
  phone String?  @unique
  company String? @default("Madrigal")
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  shipping ShippingDetails? @relation(fields: [shippingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shippingId String? @db.ObjectId
  paymentInfo PaymentDetails[]
  orderDetails OrderDetails[]
  @@map("User")
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productName String 
  productDescription String 
  sellingPrice Int 
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String @unique @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId 
  itemCategoryType String?
  orderItem OrderItems[]
  asset ProductAsset[]
  typeOfResturant Resturants @default(casual)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("Product")
}

model ProductAsset {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  images String[]
  productsId  String @db.ObjectId
  product Product @relation(fields: [productsId], references: [id])
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("Productasset")
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String @unique 
  categoryDescription String 
  product Product[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Category")
}

model Inventory{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  productName String @unique @map("product_name")
  lastRefilDate DateTime?
  product Product?  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Inventory")
}

model OrderDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  total Int 
  payment PaymentDetails[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  shippingInfo ShippingDetails[]
  status OrderStatus @default(pending)
  items OrderItems[]
  updatedAt DateTime @updatedAt 
  createdAt DateTime @default(now()) 

  @@map("Orderdetails")
}

model OrderItems {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  order OrderDetails? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String? @db.ObjectId 
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade)
  productId String @db.ObjectId
  quantity Int
  price Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("Orderitems")
}

model PaymentDetails {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  orderPayment OrderDetails @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId
  amount Int 
  provider PaymentProviders @default(mpesa)
  status PaymentStatus @default(pending)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("Paymentdetails")

}

model ShippingDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  county String 
  street String
  town String
  locationDesc String @map("location_desc")
  status ShippingStatus @default(pending)
  createdAt DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")
  user User[]
  order OrderDetails @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId

  @@map("Shippingdetails")
}


enum Resturants {
  casual
  classic
  clothing
}

enum OrderStatus {
  pending
  completed
  canceled
}


enum PaymentStatus {
  pending
  completed
  canceled
}

enum PaymentProviders {
 mpesa
 paypal
}


enum ShippingStatus {
  pending
  completed
  canceled
}
